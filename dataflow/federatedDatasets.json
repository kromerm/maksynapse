{
	"name": "federatedDatasets",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "movie_dataflow_source11",
						"type": "DatasetReference"
					},
					"name": "moviescsv"
				},
				{
					"dataset": {
						"referenceName": "moviestage2",
						"type": "DatasetReference"
					},
					"name": "moviesdb"
				},
				{
					"dataset": {
						"referenceName": "moviesoutnew_parquet2",
						"type": "DatasetReference"
					},
					"name": "moviesparquet"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "folderout",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "Join1"
				},
				{
					"name": "Join2"
				},
				{
					"name": "Select1"
				},
				{
					"name": "Aggregate1"
				},
				{
					"name": "ModifyColumns1",
					"description": "Autogenerated by data preview actions"
				},
				{
					"name": "RemoveColumns1",
					"description": "Autogenerated by data preview actions"
				},
				{
					"name": "Sort1"
				}
			],
			"script": "source(output(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as string,\n\t\tRating as string,\n\t\t{Rotton Tomato} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> moviescsv\nsource(output(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as integer,\n\t\tRating as integer,\n\t\tRottenTomato as integer,\n\t\t{Rotton Tomato} as string,\n\t\tdateOfETL as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> moviesdb\nsource(output(\n\t\tMovieIdDupe as integer,\n\t\tActionDupe as string,\n\t\tMovieId as integer,\n\t\tTitle as string,\n\t\tGenre as string,\n\t\tYear as integer,\n\t\tRating as integer,\n\t\tRottenTom as integer,\n\t\tAction as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> moviesparquet\nmoviescsv, moviesdb join(moviescsv@movie == moviesdb@movie,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join1\nJoin1, moviesparquet join(toInteger(moviescsv@movie) == MovieId,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> Join2\nJoin2 select(mapColumn(\n\t\tmovie = moviescsv@movie,\n\t\ttitle = moviescsv@title,\n\t\tyear = moviescsv@year,\n\t\tRating = moviescsv@Rating,\n\t\tmovie = moviesdb@movie,\n\t\tyear = moviesdb@year,\n\t\tRating = moviesdb@Rating,\n\t\tRottenTomato,\n\t\tdateOfETL,\n\t\tMovieIdDupe,\n\t\tActionDupe,\n\t\tMovieId,\n\t\tGenre,\n\t\tRating = moviesparquet@Rating,\n\t\tRottenTom,\n\t\tAction\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 aggregate(groupBy(movieagg = movie),\n\teach(match(true()), $$ = first(toString($$)))) ~> Aggregate1\nAggregate1 derive(year = toInteger(year),\n\t\tRating = toInteger(Rating)) ~> ModifyColumns1\nModifyColumns1 select(mapColumn(\n\t\tmovieagg,\n\t\tmovie,\n\t\ttitle,\n\t\tyear,\n\t\tRating,\n\t\tRottenTomato,\n\t\tdateOfETL,\n\t\tMovieId,\n\t\tGenre,\n\t\tAction\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: true) ~> RemoveColumns1\nRemoveColumns1 sort(asc(year, true)) ~> Sort1\nSort1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> sink1"
		}
	}
}