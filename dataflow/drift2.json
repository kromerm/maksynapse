{
	"name": "drift2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "moviesDriftSource1",
						"type": "DatasetReference"
					},
					"name": "SchemaOnRead"
				},
				{
					"dataset": {
						"referenceName": "MoviesD2",
						"type": "DatasetReference"
					},
					"name": "MoviesWithSchema"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "moviesParquet2",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "Join1"
				},
				{
					"name": "MapDriftedColumn"
				},
				{
					"name": "Select1"
				}
			],
			"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false) ~> SchemaOnRead\nsource(output(\n\t\tmovie as integer,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as short,\n\t\tRating as short,\n\t\t{Rotton Tomato} as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> MoviesWithSchema\nMapDriftedColumn, MoviesWithSchema join(MapDriftedColumn@movie == MoviesWithSchema@movie,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join1\nSchemaOnRead derive(movie = toInteger(byName('movie')),\n\t\teach(match(type=='string'), $$+'_caps' = initCap($$))) ~> MapDriftedColumn\nJoin1 select(mapColumn(\n\t\teach(match(true()),\n\t\t\treplace($$,' ') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['parquetMovies.parquet'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink1"
		}
	}
}