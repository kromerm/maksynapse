{
	"name": "TransformADOData",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ADOWorkItemJsonTest",
						"type": "DatasetReference"
					},
					"name": "ADOBugsJson"
				},
				{
					"dataset": {
						"referenceName": "ADOWorkItemJsonTest",
						"type": "DatasetReference"
					},
					"name": "ADOTasksJsonData"
				},
				{
					"dataset": {
						"referenceName": "ADOWorkItemJsonTest",
						"type": "DatasetReference"
					},
					"name": "ADOFeaturesJsonData"
				},
				{
					"dataset": {
						"referenceName": "ADOWorkItemJsonTest",
						"type": "DatasetReference"
					},
					"name": "ADOUserStoryJsonData"
				},
				{
					"dataset": {
						"referenceName": "GitJsonDataADOTest",
						"type": "DatasetReference"
					},
					"name": "ADOGitJsonData"
				},
				{
					"dataset": {
						"referenceName": "ADOUserJsonDataTest",
						"type": "DatasetReference"
					},
					"name": "ADOUserData"
				},
				{
					"dataset": {
						"referenceName": "ActivityMasterData",
						"type": "DatasetReference"
					},
					"name": "ActivityData"
				},
				{
					"dataset": {
						"referenceName": "EmployeeMasterDataSet",
						"type": "DatasetReference"
					},
					"name": "EmployeeData"
				},
				{
					"dataset": {
						"referenceName": "EmployeeActivityDataSet",
						"type": "DatasetReference"
					},
					"name": "EmployeeActvityData"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "EmployeeActivityDataSink",
						"type": "DatasetReference"
					},
					"name": "UpdateValuesToEmployeeActivtyTable"
				}
			],
			"transformations": [
				{
					"name": "Flattenthevauearray"
				},
				{
					"name": "FlattenTheTaskValueArray"
				},
				{
					"name": "FlattenTheFeatureValueArray"
				},
				{
					"name": "FlattenTheUserStoryValueArray"
				},
				{
					"name": "UnpivotBugs"
				},
				{
					"name": "FlattenTGeGItJson"
				},
				{
					"name": "FLattenTheADOUserJsonData"
				},
				{
					"name": "Join1"
				},
				{
					"name": "Select1"
				},
				{
					"name": "UnpivotGitData"
				},
				{
					"name": "UnpivotTasks"
				},
				{
					"name": "UnpivotFeatures"
				},
				{
					"name": "UnpivotUserStory"
				},
				{
					"name": "CombineAllWorkItems"
				},
				{
					"name": "FilterOutAlltheNullValues"
				},
				{
					"name": "DerivedColumn1"
				},
				{
					"name": "ExtractActivityID"
				},
				{
					"name": "SelectWIthActivityID"
				},
				{
					"name": "SelectEmployeeIDAndUserSK"
				},
				{
					"name": "JoinWithEmployee"
				},
				{
					"name": "SelectTheRequiredColumns"
				},
				{
					"name": "UpdatetheEmplyeeActivityTable"
				},
				{
					"name": "Sort1"
				},
				{
					"name": "AggregateTheActivityValueForBugs"
				},
				{
					"name": "AlterRow1"
				},
				{
					"name": "AggregateTheActivityValueForTasks"
				},
				{
					"name": "AggregateTheActivityValueForFeatures"
				},
				{
					"name": "AggregateTheActivityValueForUserStory"
				},
				{
					"name": "AggregateTheActivityValueForGit"
				},
				{
					"name": "ConvertActivatedDateToDate"
				},
				{
					"name": "ConvertActivateDateToDate"
				},
				{
					"name": "ConvertFeatureActivateDateToDate"
				},
				{
					"name": "ConvertUserStoryActivatedDateToDate"
				},
				{
					"name": "ConvertTheGItActivatedDateToDate"
				}
			],
			"script": "source(output(\n\t\tvalue as (WorkItemId as string, InProgressDate as string, CompletedDate as string, LeadTimeDays as double, CycleTimeDays as double, InProgressDateSK as string, CompletedDateSK as string, AnalyticsUpdatedDate as string, ProjectSK as string, WorkItemRevisionSK as string, AreaSK as string, IterationSK as string, AssignedToUserSK as string, ChangedByUserSK as string, CreatedByUserSK as string, ActivatedByUserSK as string, ClosedByUserSK as string, ResolvedByUserSK as string, ActivatedDateSK as string, ChangedDateSK as string, ClosedDateSK as string, CreatedDateSK as string, ResolvedDateSK as string, StateChangeDateSK as string, Revision as string, Watermark as string, Title as string, WorkItemType as string, ChangedDate as string, CreatedDate as string, State as string, Reason as string, FoundIn as string, IntegrationBuild as string, ActivatedDate as string, Activity as string, BusinessValue as string, ClosedDate as string, Issue as string, Priority as string, Rating as string, ResolvedDate as string, ResolvedReason as string, Risk as string, Severity as string, StackRank as string, TimeCriticality as string, ValueArea as string, CompletedWork as string, DueDate as string, Effort as string, FinishDate as string, OriginalEstimate as string, RemainingWork as string, StartDate as string, StoryPoints as string, TargetDate as string, ParentWorkItemId as string, TagNames as string, StateCategory as string, AutomatedTestId as string, AutomatedTestName as string, AutomatedTestStorage as string, AutomatedTestType as string, AutomationStatus as string, StateChangeDate as string, Count as string, CommentCount as string, Microsoft_VSTS_CodeReview_AcceptedBySK as string, Microsoft_VSTS_CodeReview_AcceptedDate as string, Microsoft_VSTS_CodeReview_ClosedStatus as string, Microsoft_VSTS_CodeReview_ClosedStatusCode as string, Microsoft_VSTS_CodeReview_ClosingComment as string, Microsoft_VSTS_CodeReview_Context as string, Microsoft_VSTS_CodeReview_ContextCode as string, Microsoft_VSTS_CodeReview_ContextOwner as string, Microsoft_VSTS_CodeReview_ContextType as string, Microsoft_VSTS_Common_ReviewedBySK as string, Microsoft_VSTS_Common_StateCode as string, Microsoft_VSTS_Feedback_ApplicationType as string, Microsoft_VSTS_TCM_TestSuiteType as string, Microsoft_VSTS_TCM_TestSuiteTypeId as string)[]\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine',\n\tpartitionBy('hash', 1)) ~> ADOBugsJson\nsource(output(\n\t\tvalue as (WorkItemId as string, InProgressDate as string, CompletedDate as string, LeadTimeDays as double, CycleTimeDays as double, InProgressDateSK as string, CompletedDateSK as string, AnalyticsUpdatedDate as string, ProjectSK as string, WorkItemRevisionSK as string, AreaSK as string, IterationSK as string, AssignedToUserSK as string, ChangedByUserSK as string, CreatedByUserSK as string, ActivatedByUserSK as string, ClosedByUserSK as string, ResolvedByUserSK as string, ActivatedDateSK as string, ChangedDateSK as string, ClosedDateSK as string, CreatedDateSK as string, ResolvedDateSK as string, StateChangeDateSK as string, Revision as string, Watermark as string, Title as string, WorkItemType as string, ChangedDate as string, CreatedDate as string, State as string, Reason as string, FoundIn as string, IntegrationBuild as string, ActivatedDate as string, Activity as string, BusinessValue as string, ClosedDate as string, Issue as string, Priority as string, Rating as string, ResolvedDate as string, ResolvedReason as string, Risk as string, Severity as string, StackRank as string, TimeCriticality as string, ValueArea as string, CompletedWork as string, DueDate as string, Effort as string, FinishDate as string, OriginalEstimate as string, RemainingWork as string, StartDate as string, StoryPoints as string, TargetDate as string, ParentWorkItemId as string, TagNames as string, StateCategory as string, AutomatedTestId as string, AutomatedTestName as string, AutomatedTestStorage as string, AutomatedTestType as string, AutomationStatus as string, StateChangeDate as string, Count as string, CommentCount as string, Microsoft_VSTS_CodeReview_AcceptedBySK as string, Microsoft_VSTS_CodeReview_AcceptedDate as string, Microsoft_VSTS_CodeReview_ClosedStatus as string, Microsoft_VSTS_CodeReview_ClosedStatusCode as string, Microsoft_VSTS_CodeReview_ClosingComment as string, Microsoft_VSTS_CodeReview_Context as string, Microsoft_VSTS_CodeReview_ContextCode as string, Microsoft_VSTS_CodeReview_ContextOwner as string, Microsoft_VSTS_CodeReview_ContextType as string, Microsoft_VSTS_Common_ReviewedBySK as string, Microsoft_VSTS_Common_StateCode as string, Microsoft_VSTS_Feedback_ApplicationType as string, Microsoft_VSTS_TCM_TestSuiteType as string, Microsoft_VSTS_TCM_TestSuiteTypeId as string)[]\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine',\n\tpartitionBy('hash', 1)) ~> ADOTasksJsonData\nsource(output(\n\t\tvalue as (WorkItemId as string, InProgressDate as string, CompletedDate as string, LeadTimeDays as double, CycleTimeDays as double, InProgressDateSK as string, CompletedDateSK as string, AnalyticsUpdatedDate as string, ProjectSK as string, WorkItemRevisionSK as string, AreaSK as string, IterationSK as string, AssignedToUserSK as string, ChangedByUserSK as string, CreatedByUserSK as string, ActivatedByUserSK as string, ClosedByUserSK as string, ResolvedByUserSK as string, ActivatedDateSK as string, ChangedDateSK as string, ClosedDateSK as string, CreatedDateSK as string, ResolvedDateSK as string, StateChangeDateSK as string, Revision as string, Watermark as string, Title as string, WorkItemType as string, ChangedDate as string, CreatedDate as string, State as string, Reason as string, FoundIn as string, IntegrationBuild as string, ActivatedDate as string, Activity as string, BusinessValue as string, ClosedDate as string, Issue as string, Priority as string, Rating as string, ResolvedDate as string, ResolvedReason as string, Risk as string, Severity as string, StackRank as string, TimeCriticality as string, ValueArea as string, CompletedWork as string, DueDate as string, Effort as string, FinishDate as string, OriginalEstimate as string, RemainingWork as string, StartDate as string, StoryPoints as string, TargetDate as string, ParentWorkItemId as string, TagNames as string, StateCategory as string, AutomatedTestId as string, AutomatedTestName as string, AutomatedTestStorage as string, AutomatedTestType as string, AutomationStatus as string, StateChangeDate as string, Count as string, CommentCount as string, Microsoft_VSTS_CodeReview_AcceptedBySK as string, Microsoft_VSTS_CodeReview_AcceptedDate as string, Microsoft_VSTS_CodeReview_ClosedStatus as string, Microsoft_VSTS_CodeReview_ClosedStatusCode as string, Microsoft_VSTS_CodeReview_ClosingComment as string, Microsoft_VSTS_CodeReview_Context as string, Microsoft_VSTS_CodeReview_ContextCode as string, Microsoft_VSTS_CodeReview_ContextOwner as string, Microsoft_VSTS_CodeReview_ContextType as string, Microsoft_VSTS_Common_ReviewedBySK as string, Microsoft_VSTS_Common_StateCode as string, Microsoft_VSTS_Feedback_ApplicationType as string, Microsoft_VSTS_TCM_TestSuiteType as string, Microsoft_VSTS_TCM_TestSuiteTypeId as string)[]\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine',\n\tpartitionBy('hash', 1)) ~> ADOFeaturesJsonData\nsource(output(\n\t\tvalue as (WorkItemId as string, InProgressDate as string, CompletedDate as string, LeadTimeDays as double, CycleTimeDays as double, InProgressDateSK as string, CompletedDateSK as string, AnalyticsUpdatedDate as string, ProjectSK as string, WorkItemRevisionSK as string, AreaSK as string, IterationSK as string, AssignedToUserSK as string, ChangedByUserSK as string, CreatedByUserSK as string, ActivatedByUserSK as string, ClosedByUserSK as string, ResolvedByUserSK as string, ActivatedDateSK as string, ChangedDateSK as string, ClosedDateSK as string, CreatedDateSK as string, ResolvedDateSK as string, StateChangeDateSK as string, Revision as string, Watermark as string, Title as string, WorkItemType as string, ChangedDate as string, CreatedDate as string, State as string, Reason as string, FoundIn as string, IntegrationBuild as string, ActivatedDate as string, Activity as string, BusinessValue as string, ClosedDate as string, Issue as string, Priority as string, Rating as string, ResolvedDate as string, ResolvedReason as string, Risk as string, Severity as string, StackRank as string, TimeCriticality as string, ValueArea as string, CompletedWork as string, DueDate as string, Effort as string, FinishDate as string, OriginalEstimate as string, RemainingWork as string, StartDate as string, StoryPoints as string, TargetDate as string, ParentWorkItemId as string, TagNames as string, StateCategory as string, AutomatedTestId as string, AutomatedTestName as string, AutomatedTestStorage as string, AutomatedTestType as string, AutomationStatus as string, StateChangeDate as string, Count as string, CommentCount as string, Microsoft_VSTS_CodeReview_AcceptedBySK as string, Microsoft_VSTS_CodeReview_AcceptedDate as string, Microsoft_VSTS_CodeReview_ClosedStatus as string, Microsoft_VSTS_CodeReview_ClosedStatusCode as string, Microsoft_VSTS_CodeReview_ClosingComment as string, Microsoft_VSTS_CodeReview_Context as string, Microsoft_VSTS_CodeReview_ContextCode as string, Microsoft_VSTS_CodeReview_ContextOwner as string, Microsoft_VSTS_CodeReview_ContextType as string, Microsoft_VSTS_Common_ReviewedBySK as string, Microsoft_VSTS_Common_StateCode as string, Microsoft_VSTS_Feedback_ApplicationType as string, Microsoft_VSTS_TCM_TestSuiteType as string, Microsoft_VSTS_TCM_TestSuiteTypeId as string)[]\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> ADOUserStoryJsonData\nsource(output(\n\t\tvalue as (commitId as string, author as (name as string, email as string, date as string), committer as (name as string, email as string, date as string), comment as string, changeCounts as (Add as string, Edit as string, Delete as string), url as string, remoteUrl as string)[]\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine',\n\tpartitionBy('hash', 1)) ~> ADOGitJsonData\nsource(output(\n\t\tvalue as (UserSK as string, UserId as string, UserName as string, UserEmail as string, AnalyticsUpdatedDate as string, GitHubUserId as string, UserType as string)[]\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine',\n\tpartitionBy('hash', 1)) ~> ADOUserData\nsource(output(\n\t\tActivityId as integer,\n\t\tActivityName as string,\n\t\tActivityDescription as string,\n\t\tActivityTypeId as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false,\n\tpartitionBy('hash', 1)) ~> ActivityData\nsource(output(\n\t\tEmployeeId as integer,\n\t\tWPAEmployeeId as string,\n\t\tWPAEmployeeName as string,\n\t\tEmployeeHireDate as timestamp,\n\t\tOrganization as string,\n\t\tLevelDesignation as string,\n\t\tFunctionType as string,\n\t\tRegion as string,\n\t\tLayer as string,\n\t\tIsInternal as string,\n\t\tSupervisorIndicator as string,\n\t\tNumber_of_directs as string,\n\t\tADOUserSK as string,\n\t\tADOUserId as string,\n\t\tADOUserEmail as string,\n\t\tADOUserName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false,\n\tpartitionBy('hash', 1)) ~> EmployeeData\nsource(output(\n\t\tEmployeeId as integer,\n\t\tActivityId as integer,\n\t\tDate as date,\n\t\tDateKey as integer,\n\t\tActivityValue as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false,\n\tpartitionBy('hash', 1)) ~> EmployeeActvityData\nADOBugsJson foldDown(unroll(value),\n\tmapColumn(\n\t\tAssignedToUserSK = value.AssignedToUserSK,\n\t\tActivatedDate = value.ActivatedDate,\n\t\tBug_Count = value.Count\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Flattenthevauearray\nADOTasksJsonData foldDown(unroll(value),\n\tmapColumn(\n\t\tAssignedToUserSK = value.AssignedToUserSK,\n\t\tActivatedDate = value.ActivatedDate,\n\t\tTask_Count = value.Count\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FlattenTheTaskValueArray\nADOFeaturesJsonData foldDown(unroll(value),\n\tmapColumn(\n\t\tAssignedToUserSK = value.AssignedToUserSK,\n\t\tActivatedDate = value.ActivatedDate,\n\t\tFeature_Count = value.Count\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FlattenTheFeatureValueArray\nADOUserStoryJsonData foldDown(unroll(value),\n\tmapColumn(\n\t\tAssignedToUserSK = value.AssignedToUserSK,\n\t\tActivatedDate = value.ActivatedDate,\n\t\tUser_Story_Story_Points = value.StoryPoints,\n\t\tUser_Story_Count = value.Count\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FlattenTheUserStoryValueArray\nConvertActivatedDateToDate unpivot(output(\n\t\tActivityDesc as string,\n\t\t{ ActivityValue} as string\n\t),\n\tungroupBy(AssignedToUserSK,\n\t\tActivatedDate),\n\tlateral: false,\n\tignoreNullPivots: false,\n\tpartitionBy('hash', 1)) ~> UnpivotBugs\nADOGitJsonData foldDown(unroll(value),\n\tmapColumn(\n\t\tcommitId = value.commitId,\n\t\temail = value.committer.email,\n\t\tdate = value.committer.date,\n\t\tGit_Commit_Add = value.changeCounts.Add,\n\t\tGit_Commit_Edit = value.changeCounts.Edit,\n\t\tGit_Commit_Delete = value.changeCounts.Delete\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FlattenTGeGItJson\nADOUserData foldDown(unroll(value),\n\tmapColumn(\n\t\tUserSK = value.UserSK,\n\t\tUserId = value.UserId,\n\t\tUserName = value.UserName,\n\t\tUserEmail = value.UserEmail\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FLattenTheADOUserJsonData\nFlattenTGeGItJson, FLattenTheADOUserJsonData join(email == UserEmail,\n\tjoinType:'inner',\n\tpartitionBy('hash', 1),\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\tAssignedToUserSK = UserSK,\n\t\tActivatedDate = date,\n\t\tGit_Commit_Add,\n\t\tGit_Commit_Edit,\n\t\tGit_Commit_Delete\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nConvertTheGItActivatedDateToDate unpivot(output(\n\t\tActivityDesc as string,\n\t\tAcivityValue as string\n\t),\n\tungroupBy(AssignedToUserSK,\n\t\tActivatedDate),\n\tlateral: false,\n\tignoreNullPivots: false,\n\tpartitionBy('hash', 1)) ~> UnpivotGitData\nConvertActivateDateToDate unpivot(output(\n\t\tActivityDesc as string,\n\t\tActivityValue as string\n\t),\n\tungroupBy(AssignedToUserSK,\n\t\tActivatedDate),\n\tlateral: false,\n\tignoreNullPivots: true,\n\tpartitionBy('hash', 1)) ~> UnpivotTasks\nConvertFeatureActivateDateToDate unpivot(output(\n\t\tActivityDesc as string,\n\t\tActivityValue as string\n\t),\n\tungroupBy(AssignedToUserSK,\n\t\tActivatedDate),\n\tlateral: false,\n\tignoreNullPivots: true,\n\tpartitionBy('hash', 1)) ~> UnpivotFeatures\nConvertUserStoryActivatedDateToDate unpivot(output(\n\t\tActivityDesc as string,\n\t\tActivityValue as string\n\t),\n\tungroupBy(AssignedToUserSK,\n\t\tActivatedDate),\n\tlateral: false,\n\tignoreNullPivots: true,\n\tpartitionBy('hash', 1)) ~> UnpivotUserStory\nAggregateTheActivityValueForFeatures, AggregateTheActivityValueForGit, AggregateTheActivityValueForBugs, AggregateTheActivityValueForTasks, AggregateTheActivityValueForUserStory union(byName: false,\n\tpartitionBy('hash', 1))~> CombineAllWorkItems\nCombineAllWorkItems filter(not(isNull(AssignedToUserSK)) && not(isNull(ActivatedDate)),\n\tpartitionBy('hash', 1)) ~> FilterOutAlltheNullValues\nFilterOutAlltheNullValues derive(DateKey = toInteger(replace(toString(ActivatedDate),'-','')),\n\t\tActivityValue = toInteger(ActivityValue)) ~> DerivedColumn1\nDerivedColumn1, ActivityData join(ActivityDesc == ActivityName,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> ExtractActivityID\nExtractActivityID select(mapColumn(\n\t\tAssignedToUserSK,\n\t\tActivityId,\n\t\tDateKey,\n\t\tActivityValue,\n\t\tDate = ActivatedDate\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectWIthActivityID\nEmployeeData select(mapColumn(\n\t\tEmployeeId,\n\t\tADOUserSK\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectEmployeeIDAndUserSK\nSelectWIthActivityID, SelectEmployeeIDAndUserSK join(AssignedToUserSK == ADOUserSK,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinWithEmployee\nJoinWithEmployee select(mapColumn(\n\t\tEmployeeId,\n\t\tActivityId,\n\t\tDate,\n\t\tDateKey,\n\t\tActivityValue\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectTheRequiredColumns\nSort1, EmployeeActvityData exists(SelectTheRequiredColumns@EmployeeId == EmployeeActvityData@EmployeeId\n\t&& SelectTheRequiredColumns@DateKey == EmployeeActvityData@DateKey\n\t&& SelectTheRequiredColumns@ActivityId == EmployeeActvityData@ActivityId\n\t&& SelectTheRequiredColumns@ActivityValue == EmployeeActvityData@ActivityValue,\n\tnegate:true,\n\tpartitionBy('hash', 1),\n\tbroadcast: 'auto')~> UpdatetheEmplyeeActivityTable\nSelectTheRequiredColumns sort(asc(EmployeeId, true),\n\tasc(ActivityId, true),\n\tasc(DateKey, true),\n\tpartitionBy('hash', 1)) ~> Sort1\nUnpivotBugs aggregate(groupBy(AssignedToUserSK,\n\t\tActivatedDate,\n\t\tActivityDesc),\n\t{ ActivityValue} = sum(toInteger({ ActivityValue})),\n\tpartitionBy('hash', 1)) ~> AggregateTheActivityValueForBugs\nUpdatetheEmplyeeActivityTable alterRow(upsertIf(ActivityValue>=1)) ~> AlterRow1\nUnpivotTasks aggregate(groupBy(AssignedToUserSK,\n\t\tActivatedDate,\n\t\tActivityDesc),\n\tActivityValue = sum(toInteger(ActivityValue))) ~> AggregateTheActivityValueForTasks\nUnpivotFeatures aggregate(groupBy(AssignedToUserSK,\n\t\tActivatedDate,\n\t\tActivityDesc),\n\tActivityValue = sum(toInteger(ActivityValue))) ~> AggregateTheActivityValueForFeatures\nUnpivotUserStory aggregate(groupBy(AssignedToUserSK,\n\t\tActivatedDate,\n\t\tActivityDesc),\n\tActivityValue = sum(toInteger(ActivityValue))) ~> AggregateTheActivityValueForUserStory\nUnpivotGitData aggregate(groupBy(AssignedToUserSK,\n\t\tActivatedDate,\n\t\tActivityDesc),\n\tAcivityValue = sum(toInteger(AcivityValue))) ~> AggregateTheActivityValueForGit\nFlattenthevauearray derive(ActivatedDate = toDate(ActivatedDate,'yyyy-MM-dd')) ~> ConvertActivatedDateToDate\nFlattenTheTaskValueArray derive(ActivatedDate = toDate(ActivatedDate,'yyyy-MM-dd')) ~> ConvertActivateDateToDate\nFlattenTheFeatureValueArray derive(ActivatedDate = toDate(ActivatedDate,'yyyy-MM-dd')) ~> ConvertFeatureActivateDateToDate\nFlattenTheUserStoryValueArray derive(ActivatedDate = toDate(ActivatedDate,'yyyy-MM-dd')) ~> ConvertUserStoryActivatedDateToDate\nSelect1 derive(ActivatedDate = toDate(ActivatedDate,'yyyy-MM-dd')) ~> ConvertTheGItActivatedDateToDate\nAlterRow1 sink(input(\n\t\tEmployeeId as integer,\n\t\tActivityId as integer,\n\t\tDate as date,\n\t\tDateKey as integer,\n\t\tActivityValue as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['EmployeeId','ActivityId','DateKey'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tmapColumn(\n\t\tEmployeeId,\n\t\tActivityId,\n\t\tDate,\n\t\tDateKey,\n\t\tActivityValue\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> UpdateValuesToEmployeeActivtyTable"
		}
	}
}